import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'com.github.johnrengelman.shadow' version '5.2.0'
	id 'maven-publish'
	id 'eclipse'
	id 'java'
}

jar.archiveName = project.name + '.jar'
// Add SNAPSHOT to make this publish as a beta.
version '1.1.4.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {

	// Google Flogger
	implementation (group: 'com.google.flogger', name: 'flogger-system-backend', version: '0.5.1')
	implementation (group: 'com.google.flogger', name: 'flogger', version: '0.5.1')

	// Google Gson
	implementation (group: 'com.google.code.gson', name: 'gson', version: '2.8.0')

	// Google Guava
	implementation (group: 'com.google.guava', name: 'guava', version: '19.0')

	// JUnit
	testRuntimeOnly (group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0')
	testImplementation (group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0')
	testImplementation (group: 'com.google.code.gson', name: 'gson', version: '2.8.0')
	testImplementation (group: 'com.google.guava', name: 'guava', version: '19.0')
	testImplementation (group: 'com.google.flogger', name: 'flogger-system-backend', version: '0.5.1')
	testImplementation (group: 'com.google.flogger', name: 'flogger', version: '0.5.1')

}

publishing {
	repositories {
		maven {
			name = "Japson"
			url = uri("https://maven.pkg.github.com/Sitrica/Japson")
			credentials {
				username = 'Sitrica'
				password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES_KEY")
			}
		}
	}
	publications {
		shadow(MavenPublication) {publication ->
			project.shadow.component(publication)
			version = version
			groupId = 'com.sitrica'
			def releases = 'japson' // Don't modify
			def snapshots = 'japson-beta' // Don't modify
			artifactId = version.endsWith('SNAPSHOT') ? snapshots : releases
		}
	}
}

processResources {
	filter ReplaceTokens, tokens: ["version": version]
	from (sourceSets.main.resources.srcDirs) {
		include '*.yml'
	}
}

shadowJar {
	archiveVersion = version
	baseName = project.name
	classifier = ''
	relocate 'com.google.gson', 'com.sitrica.japson.gson'
	minimize {
		exclude(dependency('com.google.flogger:'))
	}
}

test {

	useJUnitPlatform()

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		 logger.lifecycle("Running test: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		 logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}

}
